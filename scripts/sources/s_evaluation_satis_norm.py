#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.4'
#       jupytext_version: 1.1.5
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# # s_evaluation_satis_norm [<img src="https://www.arpm.co/lab/icons/icon_permalink.png" width=30 height=30 style="display: inline;">](https://www.arpm.co/lab/redirect.php?code=s_evaluation_satis_norm&codeLang=Python)
# For details, see [here](https://www.arpm.co/lab/redirect.php?permalink=EBSatisfNormalNumerical).

import numpy as np
import pandas as pd
from scipy.special import erfinv

# ## [Input parameters](https://www.arpm.co/lab/redirect.php?permalink=s_evaluation_satis_norm-parameters)

lam = 1/4  # risk aversion parameter
c = 0.95  # confidence level

# ## [Step 1](https://www.arpm.co/lab/redirect.php?permalink=s_evaluation_satis_norm-implementation-step01): Load data generated by script s_aggregation_norm.py

# +
path = '../../../databases/temporary-databases/'
db = pd.read_csv(path + 'db_aggregation_normal.csv', index_col=0)

n_ = int(np.array(db['n_'].iloc[0]))
mu_pi_h = np.array(db['mu_h'].iloc[0])
sig2_pi_h = np.array(db['sig2_h'].iloc[0])

h = np.array(db['h'].iloc[:n_]).reshape(-1)
# -

# ## [Step 2](https://www.arpm.co/lab/redirect.php?permalink=s_evaluation_satis_norm-implementation-step02): Compute the standard deviation

sig_pi_h = np.sqrt(sig2_pi_h)  # portfolio P&L standard deviation

# ## [Step 3](https://www.arpm.co/lab/redirect.php?permalink=s_evaluation_satis_norm-implementation-step03): Compute the mean-variance trade-off

mv_pi_h_to = mu_pi_h - lam / 2 * sig2_pi_h

# ## [Step 4](https://www.arpm.co/lab/redirect.php?permalink=s_evaluation_satis_norm-implementation-step04): Compute the certainty-equivalent

cert_eq_pi_h = mu_pi_h - lam / 2 * sig2_pi_h

# ## [Step 5](https://www.arpm.co/lab/redirect.php?permalink=s_evaluation_satis_norm-implementation-step05): Compute the quantile (VaR)

q_pi_h = mu_pi_h + sig_pi_h * np.sqrt(2) * erfinv(1 - 2 * c)
# Cornish-Fisher approximation
q_pi_h_cf = (mu_pi_h+sig_pi_h*(-1.64))

# ## [Step 6](https://www.arpm.co/lab/redirect.php?permalink=s_evaluation_satis_norm-implementation-step06): Compute the expected shortfall

cvar_pi_h = mu_pi_h + sig_pi_h / (1 - c) *\
            (-1 / (np.sqrt(2 * np.pi)) * np.exp(-erfinv(1 - 2 * c) ** 2))

# ## [Step 7](https://www.arpm.co/lab/redirect.php?permalink=s_evaluation_satis_norm-implementation-step07): Compute the information ratio

info_ratio_pi_h = mu_pi_h / sig_pi_h

# ## [Step 8](https://www.arpm.co/lab/redirect.php?permalink=s_evaluation_satis_norm-implementation-step08): Save data in database db_aggregation_normal

# +
output = {
          '-sig_pi_h': pd.Series(-sig_pi_h),
          'cvar_pi_h': pd.Series(cvar_pi_h),
         }

df = pd.DataFrame(output)
df.to_csv('../../../databases/temporary-databases/db_evaluation_satis_normal.csv')
